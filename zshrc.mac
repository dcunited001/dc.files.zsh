#!/bin/zsh
export OS_TYPE=mac
export DOTFILES=$HOME/.files

export SHELL=zsh
export EDITOR=vim
export DEFAULT_USER="dc"

#switch to gnu-getopt
# ughhh.. no don't run ruby dependent on 'debug' in the zshrc
#export FLAGS_GETOPT_CMD="$(brew --prefix gnu-getopt)/bin/getopt"

#load common zsh
[[ -e "$DOTFILES/zsh/zshrc" ]] && source $DOTFILES/zsh/zshrc

# add ~/bin
export PATH=$PATH:$HOME/bin

# add SML path
export PATH=$PATH:$HOME/dev/src/smlnj/bin

#====================================
# python
#====================================
export THE_PYTHON=/usr/local/bin/python2

# - this mysterious location is for 2.7 and not 3.5 =/
# - and doesn't appear to be very important.  i wonder what it does...
# PATH=${PATH}:/usr/local/share/python

#====================================
# virtualenv
#====================================
#TODO: either 1) only execute if virtualenv exists
#          or 2) notate how to install (refer to http://te.xel.io/ and find the powerline blog)
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=$THE_PYTHON
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true
if [[ -r /usr/local/bin/virtualenvwrapper.sh ]]; then
    source /usr/local/bin/virtualenvwrapper.sh
else
    echo "WARNING: Can't find virtualenvwrapper.sh"
fi

#====================================
# powerline (zsh)
#====================================
# TODO: init script to automatically link ~/.config/powerline to ~/.files/powerline
#export POWERLINE_PYTHON_VERSION=3.5

# difference b/w site-packages & dist-packages?
# - is that correct behavior for brew to setup pip to install to site-packages?
#export SITE_PACKAGES=/usr/local/lib/python$POWERLINE_PYTHON_VERSION/site-packages
#. $SITE_PACKAGES/powerline/bindings/zsh/powerline.zsh

#====================================
# android sdk
#====================================
export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
export PATH="$PATH:$ANDROID_SDK_ROOT"

#====================================
# node/npm
#====================================
export PATH=$PATH:$HOME/node/bin
export NPM_GLOBAL=$PATH:$HOME/node/bin/npm

#====================================
# ~/local/bin
#====================================
export PATH=$PATH:$HOME/local/bin

#====================================
# vagrant
#====================================
export VAGRANT_PATH=/Applications/Vagrant/bin
PATH=$VAGRANT_PATH:$PATH:$NPM_GLOBAL:$ANDROID_SDK_ROOT/platform-tools

#====================================
# java
#====================================
# export JAVA_HOME="#(/usr/libexec/java_home -v 10.1)"
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home

# jenv (n/a)
export PATH="$HOME/.jenv/bin:$PATH"
if which jenv > /dev/null; then eval "$(jenv init -)"; fi


# maven
export M3_HOME="$HOME/src/apache-maven-3.5.3"

# gradle
PATH=$PATH:$HOME/local/gradle-4.8.1/bin

#====================================
# rbenv
#====================================

#export PATH=$HOME/.rbenv/shims:$PATH

export PATH="/Users/dc/.rbenv/shims:${PATH}"
export RBENV_SHELL=zsh
source '/usr/local/Cellar/rbenv/1.1.1/libexec/../completions/rbenv.zsh'
command rbenv rehash 2>/dev/null
rbenv() {
  local command
  command="$1"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(rbenv "sh-$command" "$@")";;
  *)
    command rbenv "$command" "$@";;
  esac
}

#====================================
# chruby
#====================================

# NOTE: using rbenv (8/2018)
#[[ -e "/usr/local/share/chruby/chruby.sh" ]] && source /usr/local/share/chruby/chruby.sh
#[[ -e "/usr/local/share/chruby/auto.sh" ]] && source /usr/local/share/chruby/auto.sh

# gmake and some compilation tools may override standard osx build tool binaries
# http://www.topbug.net/blog/2013/04/14/install-and-use-gnu-command-line-tools-in-mac-os-x/

#====================================
#
#====================================

export XDG_CONFIG_HOME=$HOME/.config
export XDG_CONFIG_DATA=$HOME/.share

#====================================
# ocaml (for hyperkit)
#====================================

. $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

#====================================
# google cloud
#====================================

# Google Cloud SDK.
if [ -f '/Users/dc/local/bin/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/dc/local/bin/google-cloud-sdk/path.zsh.inc'; fi

# shell command completion for gcloud.
if [ -f '/Users/dc/local/bin/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/dc/local/bin/google-cloud-sdk/completion.zsh.inc'; fi
