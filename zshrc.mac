#!/bin/zsh
export OS_TYPE=mac
export DOTFILES=$HOME/.files

export SHELL=zsh
export EDITOR=vim
export DEFAULT_USER="dc"

#switch to gnu-getopt
# ughhh.. no don't run ruby dependent on 'debug' in the zshrc
#export FLAGS_GETOPT_CMD="$(brew --prefix gnu-getopt)/bin/getopt"

#load common zsh
[[ -e "$DOTFILES/zsh/zshrc" ]] && source $DOTFILES/zsh/zshrc

# add ~/bin
path+=$HOME/bin
export PATH

# VS Code
path+="/Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/bin"

#====================================
# python
#====================================
# no setup - use python3 -m venv ./new_py_env

#====================================
# powerline (zsh)
#====================================
# TODO: init script to automatically link ~/.config/powerline to ~/.files/powerline
#export POWERLINE_PYTHON_VERSION=3.5

# difference b/w site-packages & dist-packages?
# - is that correct behavior for brew to setup pip to install to site-packages?
#export SITE_PACKAGES=/usr/local/lib/python$POWERLINE_PYTHON_VERSION/site-packages
#. $SITE_PACKAGES/powerline/bindings/zsh/powerline.zsh

#====================================
# android sdk
#====================================
export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
path+=$ANDROID_SDK_ROOT

#====================================
# node/npm
#====================================
path+=$HOME/node/bin
export NPM_ROOT=$home/node/bin/npm
export NPM_GLOBAL=$PATH:$NPM_ROOT

#====================================
# ~/local/bin
#====================================
path+=$HOME/local/bin

#====================================
# vagrant
#====================================
export VAGRANT_PATH=/Applications/Vagrant/bin
path=($path $VAGRANT_PATH $NPM_ROOT $ANDROID_SDK_ROOT/platform-tools)
# TODO: $ANDROID_SDK_ROOT/platform-tools?

#====================================
# java
#====================================
# export JAVA_HOME="#(/usr/libexec/java_home -v 10.1)"
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home

# jenv (n/a)
path=($HOME/.jenv/bin $path)
if which jenv > /dev/null; then eval "$(jenv init -)"; fi

# maven
export M3_HOME="$HOME/src/apache-maven-3.5.3"

# gradle
path+=$HOME/local/gradle-4.8.1/bin

#====================================
# rbenv
#====================================

#export PATH=$HOME/.rbenv/shims:$PATH

path=(/Users/dc/.rbenv/shims $path)
export RBENV_SHELL=zsh
source '/usr/local/Cellar/rbenv/1.1.2/libexec/../completions/rbenv.zsh'
command rbenv rehash 2>/dev/null
rbenv() {
  local command
  command="$1"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(rbenv "sh-$command" "$@")";;
  *)
    command rbenv "$command" "$@";;
  esac
}

#====================================
# chruby
#====================================

# NOTE: using rbenv (8/2018)
#[[ -e "/usr/local/share/chruby/chruby.sh" ]] && source /usr/local/share/chruby/chruby.sh
#[[ -e "/usr/local/share/chruby/auto.sh" ]] && source /usr/local/share/chruby/auto.sh

# gmake and some compilation tools may override standard osx build tool binaries
# http://www.topbug.net/blog/2013/04/14/install-and-use-gnu-command-line-tools-in-mac-os-x/

#====================================
#
#====================================

export XDG_CONFIG_HOME=$HOME/.config
export XDG_CONFIG_DATA=$HOME/.share

#====================================
# ocaml (for hyperkit)
#====================================

. $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

#====================================
# google cloud
#====================================

# Google Cloud SDK.
if [ -f '/Users/dc/local/bin/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/dc/local/bin/google-cloud-sdk/path.zsh.inc'; fi

# shell command completion for gcloud.
if [ -f '/Users/dc/local/bin/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/dc/local/bin/google-cloud-sdk/completion.zsh.inc'; fi

